# `do` for indented block, inferred in indents outside parens etc.
# more like punctuation than a keyword, so syntax highlighting should make it subtle
# `foo(a, b)`, `foo.(a, b)`, `a.foo(b)`, `foo a, b` for calls
# `a.foo b`, `(a.foo)(b)`, `a.foo.(b)` for calling `a.foo`
# `(foo a, b)` => `((foo a), b)`, `a, b` => `(a, b)`
# operators exist, in the usual case `foo a = b` is `foo(a = b)`
# operators can be words, but only a predetermined list that cannot be normal identifiers
# foo bar a, b parses as foo(bar(a), b) not foo(bar(a, b))
# if you want foo(bar(a, b)) do `foo do bar a, b`
# foo bar a, b do c parses as foo(bar(a), b, c)

binary_search(a, k) =
  # indent without do
  for result i = 0
    b = a.size
    while i < b
      # current if else syntax
      if a[mid] < k, i = mid + 1, else: b = mid
    unless i < a.size and a[i] == k, i = -1

binary_search(a, k) =
  for b = a.size, result i = 0
    while i < b
      if a[mid] < k
        i = mid + 1
      else
        # `else` is treated specially and becomes `\else:`
        b = mid
    unless i < a.size and a[i] == k, i = -1
    # not a syntactical construct, just to show unless can be defined as a normal call

assert
  [3, 5, 1, 4, 1].binary_search(1) == -1
  3 == do binary_search [1, 2, 3, 4, 5, 6], 4

space functional
  permutation(n: Int, r: Int) = product n - r + 1 .. n # infixes support unary command syntax on right hand side
  factorial(n: Int) = permutation(n, n)
  combination(n: Int, r: Int) = permutation(n, r) / factorial(r)

space imperative
  factorial(n: Int) =
    x = i = 1
    while i < n, x *= i += 1
    x

  permutation(n: Int, r: Int) =
    for result x = 1, each i = succ n - r .. n
      x |>= *i # this operator is made up but is possible

  combination(n: Int, r: Int) = do for result x = 1, each i in 0..<r do while i < r do x = x * (n - i) / (r - i)

assert
  functional::factorial(5) == imperative::factorial(5) == 120
  functional::permutation(4, 2) == imperative::permutation(4, 2) == 12
  functional::combination(6, 3) == imperative::combination(6, 3) == 20

compare_ignore_case(x: List[String]) = chain iterator(x)
  map lower; consecutives 2
  all ((a, b)) => a == b

assert
  compare_ignore_case(spread_list "abcD" "AbCD" "ABCd" "ABCD" "abcd")
  not compare_ignore_case(spread_list " ab CD" "abcd")
  not (spread compare_ignore_case, "bcda", "cbad", "dabdab")
