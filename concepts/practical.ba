Arguments = object(str: String, index: Int)
# objects are not nominal, but types are unique. meaning functions defined on Arguments are only defined on Arguments

arguments(str: String) = (str: str, index: 0)

goBack(args: Arguments, chars: Int) = args.index -= chars
rest(args: Arguments) = raw[min(args.index, args.str.size) .. args.str.lastIndex]

hasNext(args: Arguments) = args.str.canIndex(args.index)
next(args: Arguments) =
  if args.index >= args.str.size
    args.index = args.str.size
    ""
  else for result x = ""
    quote = 0 as char
    done = escaped = false
    while args.index < args.str.size
      ch = args.str[args.index]
      if done
        break
      else if not escaped and ch == '\\'
        escaped = true
      else if not escaped and ch == quote
        quote = 0
        done = true
      else
        escaped = false
        if quote == 0 and ch is whitespace
          # this is probably going to be ch.isWhitespace but you can have an is operator which calls a predicate on a value
          done = true
        else
          x += ch
    if x == "", x = next args
