# not real language
Arguments = object(str: String, index: Int)

arguments(str: String) = Arguments(str: str, index: 0)

goBack(args: Arguments, chars: Int) = args.index -= chars
rest(args: Arguments) = raw[min(args.index, args.str.size) .. args.str.lastIndex]

hasNext(args: Arguments) = args.str.canIndex(args.index)
next(args: Arguments) =
  if args.index >= args.str.size
    args.index = args.str.size
    ""
  \else for result x = ""
    quote = 0 char # calling literal with type instead of type with literal
    done = escaped = false
    while args.index < args.str.size
      ch = args.str[args.index]
      if done
        break
      \else if not escaped and ch == '\\'
        escaped = true
      \else if not escaped and ch == quote
        quote = 0
        done = true
      \else escaped = false; do
        if quote == 0 and ch ~ whitespace
          # matches operator, just an idea
          done = true
        \else
          x += ch
    if x == "", x = next(args)
